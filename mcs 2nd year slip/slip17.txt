Write a Java Program to implement Abstract Factory Pattern for Shape interface.

interface Shape {
    void draw();
}

// Concrete implementations of Shape interface
class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Circle");
    }
}

class Square implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing Square");
    }
}

// Abstract Factory interface
interface ShapeFactory {
    Shape createShape();
}

// Concrete implementations of ShapeFactory interface
class CircleFactory implements ShapeFactory {
    @Override
    public Shape createShape() {
        return new Circle();
    }
}

class SquareFactory implements ShapeFactory {
    @Override
    public Shape createShape() {
        return new Square();
    }
}

// Client class using Abstract Factory Pattern
public class AbstractFactoryPatternExample {
    public static void main(String[] args) {
        // Creating a Circle using CircleFactory
        ShapeFactory circleFactory = new CircleFactory();
        Shape circle = circleFactory.createShape();
        circle.draw();

        // Creating a Square using SquareFactory
        ShapeFactory squareFactory = new SquareFactory();
        Shape square = squareFactory.createShape();
        square.draw();
    }
}

*************************************************************************************************************************

2.Write a python program to implement Multiple Linear Regression for given dataset
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
df = pd.read_csv("data.csv")
data=df.head()
print(data)
x= df[['Weight','Volume']]
y= df['CO2']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
MLR=LinearRegression()
MLR.fit(x_train,y_train)
print("Intercept",MLR.intercept_)
print("Coefficient",MLR.coef_)
#predict the CO2 emission of a car where the weight is 2300g, and the volume is 1300ccm:
predictedCO2 = MLR.predict([[1500, 1140]])
print(predictedCO2)

*************************************************************************************************************************

3.Write node js application that transfer a file as an attachment on web and enables browser to prompt the user to download file using express js.
var express = require('express');
const fs = require('fs');
var app = express();
var PORT = 3000;

var bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended:false}));
app.get('/',function(req,res){
    const files = fs.createReadStream('Q17.html');
    res.writeHead(200,{'content-type':'text/html'});
    files.pipe(res);
});

app.post('/file-data',function(req,res){
    var name = req.body.id;
    res.download(name);
});

app.listen(PORT,function(err){
    if(err) console.log(err);
    console.log("server Listening port",PORT)
});

