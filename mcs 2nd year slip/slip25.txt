2.Write a Java Program to implement Singleton pattern for multithreading. 

public class SingletonDemo 
{
    public static void main(String[] args) {
       
        Thread thread1 = new Thread(() -> {
            SingletonDoubleCheckedLocking singleton = SingletonDoubleCheckedLocking.getInstance();
            System.out.println("Thread 1 (Double-Checked Locking): " + singleton.hashCode());
        });

        Thread thread2 = new Thread(() -> {
            SingletonDoubleCheckedLocking singleton = SingletonDoubleCheckedLocking.getInstance();
            System.out.println("Thread 2 (Double-Checked Locking): " + singleton.hashCode());
        });

        thread1.start();
        thread2.start();

      
        SingletonEnum instance1 = SingletonEnum.INSTANCE;
        SingletonEnum instance2 = SingletonEnum.INSTANCE;

        System.out.println("Instance 1 (Enum): " + instance1.hashCode());
        System.out.println("Instance 2 (Enum): " + instance2.hashCode());
    }
}

class SingletonDoubleCheckedLocking {
    private static volatile SingletonDoubleCheckedLocking instance;

    private SingletonDoubleCheckedLocking() { }

    public static SingletonDoubleCheckedLocking getInstance() {
        if (instance == null) {
            synchronized (SingletonDoubleCheckedLocking.class) {
                if (instance == null) {
                    instance = new SingletonDoubleCheckedLocking();
                }
            }
        }
        return instance;
    }
}

enum SingletonEnum {
    INSTANCE;

    

    public void doSomething() {
       
    }
}

Output: Instance 1 (Enum): 1247233941
Instance 2 (Enum): 1247233941
Thread 1 (Double-Checked Locking): 675709618
Thread 2 (Double-Checked Locking): 675709618

*************************************************************************************************************************

2.Write a python program to Implement Simple Linear Regression for predicting Salary .
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
df = pd.read_csv('Salary_data.csv')
print(df.to_string())
des=df.describe()
print(des)
x=df['YearsExp']
y=df['salary']
#plt.scatter(x,y)
#plt.show()
x=df['YearsExp'].values.reshape(-1,1)
y=df['salary'].values.reshape(-1,1)
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)
sc=StandardScaler()
sc.fit(x_train)
x_train=sc.transform(x_train)
x_test=sc.transform(x_test)
y_train=sc.transform(y_train)
y_test=sc.transform(y_test)
LR=LinearRegression()
LR.fit(x_train,y_train)
print("Intercept",LR.intercept_)
print("Coefficient",LR.coef_)
y_pred=LR.predict(x_test)
plt.scatter(x_train,y_train)
plt.plot(x_test,y_pred,color='red')
plt.title("Simple Regression")
plt.xlabel("YearExperience")
plt.ylabel("Salary")
plt.show()
data=pd.DataFrame({'Actual':y_test.flatten(),'predicted':y_pred.flatten()})
print(data)
y_pred2=LR.predict([[3]])
print(y_pred2)

*************************************************************************************************************************

3.Create a Simple Web Server using node js
var http = require('http');
http.createServer(function(req,res){
    res.writeHead(200,{'content-type':'text/html'});
    res.write("Server Created");
    console.log("Server Created");
    res.end();
}).listen(8080);


â€ƒ

